{"version":3,"sources":["../../src/response_parser.js"],"names":["ResponseParser","query","results","rows","length","splunkResults","res","_","each","isArray","row","addUnique","value","map","text","toString","arr","createColumns","data","columns","field_names","field_name","push","createRows","field_values","temp_row","forEach","column","createExportColumns","createExportRows"],"mappings":";;;;;;;;AAAA;;;;IAEqBA,c;;;;;;;0BAEbC,K,EAAOC,O,EAAS;AACpB,UAAI,CAACA,OAAD,IAAYA,QAAQC,IAAR,CAAaC,MAAb,KAAwB,CAAxC,EAA2C;AACzC,eAAO,EAAP;AACD;;AAED,UAAMC,gBAAgBH,QAAQC,IAA9B;;AAEA,UAAMG,MAAM,EAAZ;AACAC,gBAAEC,IAAF,CAAOH,aAAP,EAAsB,eAAO;AAC3B,YAAIE,UAAEE,OAAF,CAAUC,GAAV,CAAJ,EAAoB;AAChBC,oBAAUL,GAAV,EAAeM,MAAM,CAAN,CAAf;AACH,SAFD,MAEO;AACLD,oBAAUL,GAAV,EAAeM,KAAf;AACD;AACF,OAND;;AAQA,aAAOL,UAAEM,GAAF,CAAMP,GAAN,EAAW,iBAAS;AACzB,eAAO,EAAEQ,MAAMF,MAAMG,QAAN,EAAR,EAAP;AACD,OAFM,CAAP;AAGD;;;;;;kBArBkBf,c;;;AAwBrB,SAASW,SAAT,CAAmBK,GAAnB,EAAwBJ,KAAxB,EAA+B;AAC7BI,MAAIJ,KAAJ,IAAaA,KAAb;AACD;;AAED;AACA,SAASK,aAAT,CAAuBC,IAAvB,EAA6BC,OAA7B,EAAsC;AACpC,MAAIA,QAAQf,MAAR,GAAiB,CAArB,EAAwB;AACtB;AACD;AACD,MAAIgB,cAAcF,KAAK,MAAL,EAAa,QAAb,CAAlB;AACAX,YAAEM,GAAF,CAAMO,WAAN,EAAmB,UAAUC,UAAV,EAAsB;AACvC,QAAIA,WAAW,MAAX,KAAsB,KAA1B,EAAiC;AAC/BF,cAAQG,IAAR,CAAa;AACX,gBAAQD,WAAW,MAAX,CADG;AAEX,gBAAQ;AAFG,OAAb;AAID;AACF,GAPD;AAQD;;AAED,SAASE,UAAT,CAAoBL,IAApB,EAA0Bf,IAA1B,EAAgCgB,OAAhC,EAAyC;AACvC,MAAIhB,KAAKC,MAAL,GAAc,CAAlB,EAAqB;AACnB;AACD;AACD,MAAIoB,eAAeN,KAAK,MAAL,EAAa,SAAb,CAAnB;AACAX,YAAEM,GAAF,CAAMW,YAAN,EAAoB,UAAUd,GAAV,EAAe;AACjC,QAAIe,WAAW,EAAf;AACAN,YAAQO,OAAR,CAAgB,kBAAU;AACxBD,eAASH,IAAT,CAAcZ,IAAIiB,OAAO,MAAP,CAAJ,CAAd;AACD,KAFD;AAGAxB,SAAKmB,IAAL,CAAUG,QAAV;AACD,GAND;AAOD;;AAED,SAASG,mBAAT,CAA6BV,IAA7B,EAAmCC,OAAnC,EAA4C;AAC1C,MAAIA,QAAQf,MAAR,GAAiB,CAArB,EAAwB;AACtB;AACD;AACD,MAAIgB,cAAcF,KAAK,MAAL,EAAa,QAAb,CAAlB;AACAX,YAAEM,GAAF,CAAMO,WAAN,EAAmB,UAAUC,UAAV,EAAsB;AACvCF,YAAQG,IAAR,CAAa;AACX,cAAQD,UADG;AAEX,cAAQ;AAFG,KAAb;AAID,GALD;AAMD;;AAED,SAASQ,gBAAT,CAA0BX,IAA1B,EAAgCf,IAAhC,EAAsCgB,OAAtC,EAA+C;AAC7C,MAAIhB,KAAKC,MAAL,GAAc,CAAlB,EAAqB;AACnB;AACD;AACD,MAAIF,UAAUgB,KAAK,MAAL,EAAa,MAAb,CAAd;AACAX,YAAEM,GAAF,CAAMX,OAAN,EAAe,UAAUQ,GAAV,EAAe;AAC5BP,SAAKmB,IAAL,CAAUZ,GAAV;AACD,GAFD;AAGD","file":"response_parser.js","sourcesContent":["import { _ } from 'lodash';\n\nexport default class ResponseParser {\n\n  parse(query, results) {\n    if (!results || results.rows.length === 0) {\n      return [];\n    }\n\n    const splunkResults = results.rows;\n\n    const res = {};\n    _.each(splunkResults, row => {\n      if (_.isArray(row)) {\n          addUnique(res, value[0]);\n      } else {\n        addUnique(res, value);\n      }\n    });\n\n    return _.map(res, value => {\n      return { text: value.toString() };\n    });\n  }\n}\n\nfunction addUnique(arr, value) {\n  arr[value] = value;\n}\n\n//TODO: Change the type of the column dynamically and add support for _si.\nfunction createColumns(data, columns) {\n  if (columns.length > 0) {\n    return;\n  }\n  let field_names = data['data']['fields'];\n  _.map(field_names, function (field_name) {\n    if (field_name['name'] != '_si') {\n      columns.push({\n        \"text\": field_name['name'],\n        \"type\": \"string\"\n      });\n    }\n  });\n}\n\nfunction createRows(data, rows, columns) {\n  if (rows.length > 0) {\n    return;\n  }\n  let field_values = data['data']['results'];\n  _.map(field_values, function (row) {\n    let temp_row = [];\n    columns.forEach(column => {\n      temp_row.push(row[column['text']]);\n    });\n    rows.push(temp_row);\n  });\n}\n\nfunction createExportColumns(data, columns) {\n  if (columns.length > 0) {\n    return;\n  }\n  let field_names = data['data']['fields'];\n  _.map(field_names, function (field_name) {\n    columns.push({\n      \"text\": field_name,\n      \"type\": \"string\"\n    });\n  });\n}\n\nfunction createExportRows(data, rows, columns) {\n  if (rows.length > 0) {\n    return;\n  }\n  let results = data['data']['rows'];\n  _.map(results, function (row) {\n    rows.push(row);\n  });\n}"]}