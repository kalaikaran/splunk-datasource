{"version":3,"sources":["../../src/splunk_query.js"],"names":["SplunkQuery","target","templateSrv","scopedVars","index","resultFormat","orderByTime","tags","groupBy","type","params","select","updateProjection","selectModels","_","map","parts","queryPart","create","groupByParts","selectParts","part","def","find","g","value","stringParts","match","typePart","arg","partModel","partCount","length","push","splice","categories","getCategories","filter","s","category","Aggregations","Selectors","modelsIndex","indexOf","partIndex","updatePersistedParts","addStrategy","tag","interpolate","str","operator","condition","test","replace","key","measurement","variable","defaultFormatFn","multi","includeAll","kbn","regexEscape","escapedValues","join","rawQuery","query","interpolateQueryStr","i","y","selectText","render","conditions","renderTagCondition","groupBySection","fill","limit","slimit","tz","filters"],"mappings":"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","file":"splunk_query.js","sourcesContent":["import _ from 'lodash';\nimport queryPart from './splunk_query_part';\nimport kbn from 'app/core/utils/kbn';\n\nexport default class SplunkQuery {\n\n  /** @ngInject */\n  constructor(target, templateSrv, scopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n\n    target.index = target.index || '*';\n    target.resultFormat = target.resultFormat || 'time_series';\n    target.orderByTime = target.orderByTime || 'ASC';\n    target.tags = target.tags || [];\n    target.groupBy = target.groupBy || [{ type: 'time', params: ['$__interval'] }, { type: 'fill', params: ['null'] }];\n    target.select = target.select || [[{ type: 'field', params: ['value'] }, { type: 'avg', params: [] }]];\n\n    this.updateProjection();\n  }\n\n  updateProjection() {\n    this.selectModels = _.map(this.target.select, (parts) => {\n      return _.map(parts, queryPart.create);\n    });\n    this.groupByParts = _.map(this.target.groupBy, queryPart.create);\n  }\n\n  updatePersistedParts() {\n    this.target.select = _.map(this.selectModels, selectParts => {\n      return _.map(selectParts, (part) => {\n        return { type: part.def.type, params: part.params };\n      });\n    });\n  }\n\n  hasGroupByTime() {\n    return _.find(this.target.groupBy, (g) => g.type === 'time');\n  }\n\n  hasFill() {\n    return _.find(this.target.groupBy, (g) => g.type === 'fill');\n  }\n\n  addGroupBy(value) {\n    const stringParts = value.match(/^(\\w+)\\((.*)\\)$/);\n    const typePart = stringParts[1];\n    const arg = stringParts[2];\n    const partModel = queryPart.create({ type: typePart, params: [arg] });\n    const partCount = this.target.groupBy.length;\n\n    if (partCount === 0) {\n      this.target.groupBy.push(partModel.part);\n    } else if (typePart === 'time') {\n      this.target.groupBy.splice(0, 0, partModel.part);\n    } else if (typePart === 'tag') {\n      if (this.target.groupBy[partCount - 1].type === 'fill') {\n        this.target.groupBy.splice(partCount - 1, 0, partModel.part);\n      } else {\n        this.target.groupBy.push(partModel.part);\n      }\n    } else {\n      this.target.groupBy.push(partModel.part);\n    }\n\n    this.updateProjection();\n  }\n\n  removeGroupByPart(part, index) {\n    const categories = queryPart.getCategories();\n\n    if (part.def.type === 'time') {\n      // remove fill\n      this.target.groupBy = _.filter(this.target.groupBy, (g) => g.type !== 'fill');\n      // remove aggregations\n      this.target.select = _.map(this.target.select, (s) => {\n        return _.filter(s, (part) => {\n          const partModel = queryPart.create(part);\n          if (partModel.def.category === categories.Aggregations) {\n            return false;\n          }\n          if (partModel.def.category === categories.Selectors) {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.target.groupBy.splice(index, 1);\n    this.updateProjection();\n  }\n\n  removeSelect(index) {\n    this.target.select.splice(index, 1);\n    this.updateProjection();\n  }\n\n  removeSelectPart(selectParts, part) {\n    // if we remove the field remove the whole statement\n    if (part.def.type === 'field') {\n      if (this.selectModels.length > 1) {\n        const modelsIndex = _.indexOf(this.selectModels, selectParts);\n        this.selectModels.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = _.indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  addSelectPart(selectParts, type) {\n    const partModel = queryPart.create({ type: type });\n    partModel.def.addStrategy(selectParts, partModel, this);\n    this.updatePersistedParts();\n  }\n\n  renderTagCondition(tag, index, interpolate) {\n    let str = '';\n    let operator = tag.operator;\n    let value = tag.value;\n    if (index > 0) {\n      str = (tag.condition || 'AND') + ' ';\n    }\n\n    if (!operator) {\n      if (/^\\/.*\\/$/.test(value)) {\n        operator = '=~';\n      } else {\n        operator = '=';\n      }\n    }\n\n    // quote value unless regex\n    if (operator !== '=~' && operator !== '!~') {\n      if (interpolate) {\n        value = this.templateSrv.replace(value, this.scopedVars);\n      }\n      if (operator !== '>' && operator !== '<') {\n        value = \"'\" + value.replace(/\\\\/g, '\\\\\\\\') + \"'\";\n      }\n    } else if (interpolate) {\n      value = this.templateSrv.replace(value, this.scopedVars, 'regex');\n    }\n\n    return str + '\"' + tag.key + '\" ' + operator + ' ' + value;\n  }\n\n  getMeasurementAndPolicy(interpolate) {\n    let index = this.target.index;\n    let measurement = this.target.measurement || 'measurement';\n\n    if (!measurement.match('^/.*/$')) {\n      measurement = '\"' + measurement + '\"';\n    } else if (interpolate) {\n      measurement = this.templateSrv.replace(measurement, this.scopedVars, 'regex');\n    }\n\n    if (index !== 'default') {\n      index = '\"' + this.target.index + '\".';\n    } else {\n      index = '';\n    }\n\n    return index + measurement;\n  }\n\n  interpolateQueryStr(value, variable, defaultFormatFn) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      return kbn.regexEscape(value);\n    }\n\n    const escapedValues = _.map(value, kbn.regexEscape);\n    return '(' + escapedValues.join('|') + ')';\n  }\n\n  render(interpolate) {\n    const target = this.target;\n\n    if (target.rawQuery) {\n      if (interpolate) {\n        return this.templateSrv.replace(target.query, this.scopedVars, this.interpolateQueryStr);\n      } else {\n        return target.query;\n      }\n    }\n\n    let query = '| mstats ';\n    let i, y;\n    for (i = 0; i < this.selectModels.length; i++) {\n      const parts = this.selectModels[i];\n      let selectText = '';\n      for (y = 0; y < parts.length; y++) {\n        const part = parts[y];\n        selectText = part.render(selectText);\n      }\n\n      if (i > 0) {\n        query += ', ';\n      }\n      query += selectText;\n    }\n\n    query += ' WHERE ';\n    const conditions = _.map(target.tags, (tag, index) => {\n      return this.renderTagCondition(tag, index, interpolate);\n    });\n\n    if (conditions.length > 0) {\n      query += '(' + conditions.join(' ') + ') AND ';\n    }\n\n    let groupBySection = '';\n    for (i = 0; i < this.groupByParts.length; i++) {\n      const part = this.groupByParts[i];\n      if (i > 0) {\n        // for some reason fill has no separator\n        groupBySection += part.def.type === 'fill' ? ' ' : ', ';\n      }\n      groupBySection += part.render('');\n    }\n\n    if (groupBySection.length) {\n      query += ' BY ' + groupBySection;\n    }\n\n    if (target.fill) {\n      query += ' fill(' + target.fill + ')';\n    }\n\n    if (target.orderByTime === 'DESC') {\n      query += ' ORDER BY time DESC';\n    }\n\n    if (target.limit) {\n      query += ' LIMIT ' + target.limit;\n    }\n\n    if (target.slimit) {\n      query += ' SLIMIT ' + target.slimit;\n    }\n\n    if (target.tz) {\n      query += \" tz('\" + target.tz + \"')\";\n    }\n\n    return query;\n  }\n\n  renderAdhocFilters(filters) {\n    const conditions = _.map(filters, (tag, index) => {\n      return this.renderTagCondition(tag, index, false);\n    });\n    return conditions.join(' ');\n  }\n}"]}