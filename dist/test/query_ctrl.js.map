{"version":3,"sources":["../../src/query_ctrl.js"],"names":["SplunkDatasourceQueryCtrl","$scope","$injector","templateSrv","$q","uiSegmentSrv","target","queryModel","SplunkQuery","panel","scopedVars","queryBuilder","SplunkQueryBuilder","groupBySegment","newPlusButton","resultFormats","text","value","indexSegment","newSegment","index","measurement","measurementSegment","newSelectMeasurement","tagSegments","tags","tag","operator","test","condition","push","newCondition","newKey","key","newOperator","newKeyValue","fixTagSegments","buildSelectMenu","removeTagFilterSegment","fake","query","datasource","metricFindQuery","panelCtrl","refresh","orderByTime","categories","queryPart","getCategories","selectMenu","_","reduce","memo","cat","menu","submenu","map","item","type","buildExploreQuery","then","options","hasFill","limit","slimit","tz","hasGroupByTime","catch","handleQueryError","bind","addGroupBy","plusButton","html","selectParts","subitem","addSelectPart","part","evt","name","fieldsQuery","transformToSegments","removeSelectPart","when","tagsQuery","removeGroupByPart","count","length","lastSegment","Math","max","indexesQuery","splunkIndex","render","err","console","log","rawQuery","measurementFilter","undefined","error","message","addTemplateVars","segments","results","segment","expandable","variables","variable","unshift","nextValue","newOperators","splice","angular","copy","newFake","cssClass","rebuildTargetTagConditions","tagIndex","tagOperator","each","segment2","getTagValueOperator","tagValue","QueryCtrl","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import angular from 'angular';\nimport _ from 'lodash';\nimport { SplunkQueryBuilder } from './query_builder';\nimport SplunkQuery from './splunk_query';\nimport queryPart from './splunk_query_part';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\n\nexport class SplunkDatasourceQueryCtrl extends QueryCtrl {\n\n  /** @ngInject */\n  constructor($scope, $injector, templateSrv, $q, uiSegmentSrv) {\n    super($scope, $injector);\n    this.target = this.target;\n    this.uiSegmentSrv = uiSegmentSrv;\n    this.queryModel = new SplunkQuery(this.target, templateSrv, this.panel.scopedVars);\n    this.queryBuilder = new SplunkQueryBuilder(this.target);\n    this.groupBySegment = this.uiSegmentSrv.newPlusButton();\n    this.resultFormats = [{ text: 'Time Series', value: 'time_series' }, { text: 'Table', value: 'table' }];\n    this.indexSegment = this.uiSegmentSrv.newSegment(this.target.index);\n\n    if (!this.target.measurement) {\n      this.measurementSegment = this.uiSegmentSrv.newSelectMeasurement();\n    } else {\n      this.measurementSegment = this.uiSegmentSrv.newSegment(this.target.measurement);\n    }\n\n    this.tagSegments = [];\n    for (const tag of this.target.tags) {\n      if (!tag.operator) {\n        if (/^\\/.*\\/$/.test(tag.value)) {\n          tag.operator = '=~';\n        } else {\n          tag.operator = '=';\n        }\n      }\n\n      if (tag.condition) {\n        this.tagSegments.push(uiSegmentSrv.newCondition(tag.condition));\n      }\n\n      this.tagSegments.push(uiSegmentSrv.newKey(tag.key));\n      this.tagSegments.push(uiSegmentSrv.newOperator(tag.operator));\n      this.tagSegments.push(uiSegmentSrv.newKeyValue(tag.value));\n    }\n\n    this.fixTagSegments();\n    this.buildSelectMenu();\n    this.removeTagFilterSegment = uiSegmentSrv.newSegment({\n      fake: true,\n      value: '-- remove tag filter --',\n    });\n  }\n\n  // constructor($scope, $injector) {\n  //   super($scope, $injector);\n\n  //   this.scope = $scope;\n  //   this.target.target = this.target.query || 'search index=* | head 1';\n  //   this.target.type = this.target.type || 'table';\n  // }\n\n  getOptions(query) {\n    return this.datasource.metricFindQuery(query || 'search index=* | head 1');\n  }\n\n  onChangeInternal() {\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n\n\n  removeOrderByTime() {\n    this.target.orderByTime = 'ASC';\n  }\n\n  buildSelectMenu() {\n    const categories = queryPart.getCategories();\n    this.selectMenu = _.reduce(\n      categories,\n      (memo, cat, key) => {\n        const menu = {\n          text: key,\n          submenu: cat.map(item => {\n            return { text: item.type, value: item.type };\n          }),\n        };\n        memo.push(menu);\n        return memo;\n      },\n      []\n    );\n  }\n\n  getGroupByOptions() {\n    const query = this.queryBuilder.buildExploreQuery('TAG_KEYS');\n\n    return this.datasource\n      .metricFindQuery(query)\n      .then(tags => {\n        const options = [];\n        if (!this.queryModel.hasFill()) {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'fill(null)' }));\n        }\n        if (!this.target.limit) {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'LIMIT' }));\n        }\n        if (!this.target.slimit) {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'SLIMIT' }));\n        }\n        if (!this.target.tz) {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'tz' }));\n        }\n        if (this.target.orderByTime === 'ASC') {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'ORDER BY time DESC' }));\n        }\n        if (!this.queryModel.hasGroupByTime()) {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'time($interval)' }));\n        }\n        for (const tag of tags) {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'tag(' + tag.text + ')' }));\n        }\n        return options;\n      })\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  groupByAction() {\n    switch (this.groupBySegment.value) {\n      case 'LIMIT': {\n        this.target.limit = 10;\n        break;\n      }\n      case 'SLIMIT': {\n        this.target.slimit = 10;\n        break;\n      }\n      case 'tz': {\n        this.target.tz = 'UTC';\n        break;\n      }\n      case 'ORDER BY time DESC': {\n        this.target.orderByTime = 'DESC';\n        break;\n      }\n      default: {\n        this.queryModel.addGroupBy(this.groupBySegment.value);\n      }\n    }\n\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    this.groupBySegment.value = plusButton.value;\n    this.groupBySegment.html = plusButton.html;\n    this.panelCtrl.refresh();\n  }\n\n  addSelectPart(selectParts, cat, subitem) {\n    this.queryModel.addSelectPart(selectParts, subitem.value);\n    this.panelCtrl.refresh();\n  }\n\n  handleSelectPartEvent(selectParts, part, evt) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        const fieldsQuery = this.queryBuilder.buildExploreQuery('FIELDS');\n        return this.datasource\n          .metricFindQuery(fieldsQuery)\n          .then(this.transformToSegments(true))\n          .catch(this.handleQueryError.bind(this));\n      }\n      case 'part-param-changed': {\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'action': {\n        this.queryModel.removeSelectPart(selectParts, part);\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  handleGroupByPartEvent(part, index, evt) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        const tagsQuery = this.queryBuilder.buildExploreQuery('FIELD_NAMES');\n        return this.datasource\n          .metricFindQuery(tagsQuery)\n          .then(this.transformToSegments(true))\n          .catch(this.handleQueryError.bind(this));\n      }\n      case 'part-param-changed': {\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'action': {\n        this.queryModel.removeGroupByPart(part, index);\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  fixTagSegments() {\n    const count = this.tagSegments.length;\n    const lastSegment = this.tagSegments[Math.max(count - 1, 0)];\n\n    if (!lastSegment || lastSegment.type !== 'plus-button') {\n      this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n    }\n  }\n\n  measurementChanged() {\n    this.target.measurement = this.measurementSegment.value;\n    this.panelCtrl.refresh();\n  }\n\n  getAvailableIndexes() {\n    const indexesQuery = this.queryBuilder.buildExploreQuery('INDEXES');\n    return this.datasource\n      .metricFindQuery(indexesQuery)\n      .then(this.transformToSegments(false))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  indexChanged() {\n    this.target.splunkIndex = this.splunkIndex.value;\n    this.panelCtrl.refresh();\n  }\n\n  toggleEditorMode() {\n    try {\n      this.target.query = this.queryModel.render(false);\n    } catch (err) {\n      console.log('query render error');\n    }\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n  getMeasurements(measurementFilter) {\n    const query = this.queryBuilder.buildExploreQuery('MEASUREMENTS', undefined, measurementFilter);\n    return this.datasource\n      .metricFindQuery(query)\n      .then(this.transformToSegments(true))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  handleQueryError(err) {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n\n  transformToSegments(addTemplateVars) {\n    return results => {\n      const segments = _.map(results, segment => {\n        return this.uiSegmentSrv.newSegment({\n          value: segment.text,\n          expandable: segment.expandable,\n        });\n      });\n\n      if (addTemplateVars) {\n        for (const variable of this.templateSrv.variables) {\n          segments.unshift(\n            this.uiSegmentSrv.newSegment({\n              type: 'value',\n              value: '/^$' + variable.name + '$/',\n              expandable: true,\n            })\n          );\n        }\n      }\n\n      return segments;\n    };\n  }\n\n  getTagsOrValues(segment, index) {\n    if (segment.type === 'condition') {\n      return this.$q.when([this.uiSegmentSrv.newSegment('AND'), this.uiSegmentSrv.newSegment('OR')]);\n    }\n    if (segment.type === 'operator') {\n      const nextValue = this.tagSegments[index + 1].value;\n      if (/^\\/.*\\/$/.test(nextValue)) {\n        return this.$q.when(this.uiSegmentSrv.newOperators(['=~', '!~']));\n      } else {\n        return this.$q.when(this.uiSegmentSrv.newOperators(['=', '!=', '<>', '<', '>']));\n      }\n    }\n\n    let query, addTemplateVars;\n    if (segment.type === 'key' || segment.type === 'plus-button') {\n      query = this.queryBuilder.buildExploreQuery('TAG_KEYS');\n      addTemplateVars = false;\n    } else if (segment.type === 'value') {\n      query = this.queryBuilder.buildExploreQuery('TAG_VALUES', this.tagSegments[index - 2].value);\n      addTemplateVars = true;\n    }\n\n    return this.datasource\n      .metricFindQuery(query)\n      .then(this.transformToSegments(addTemplateVars))\n      .then(results => {\n        if (segment.type === 'key') {\n          results.splice(0, 0, angular.copy(this.removeTagFilterSegment));\n        }\n        return results;\n      })\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  getFieldSegments() {\n    const fieldsQuery = this.queryBuilder.buildExploreQuery('FIELDS');\n    return this.datasource\n      .metricFindQuery(fieldsQuery)\n      .then(this.transformToSegments(false))\n      .catch(this.handleQueryError);\n  }\n\n  tagSegmentUpdated(segment, index) {\n    this.tagSegments[index] = segment;\n\n    // handle remove tag condition\n    if (segment.value === this.removeTagFilterSegment.value) {\n      this.tagSegments.splice(index, 3);\n      if (this.tagSegments.length === 0) {\n        this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n      } else if (this.tagSegments.length > 2) {\n        this.tagSegments.splice(Math.max(index - 1, 0), 1);\n        if (this.tagSegments[this.tagSegments.length - 1].type !== 'plus-button') {\n          this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n        }\n      }\n    } else {\n      if (segment.type === 'plus-button') {\n        if (index > 2) {\n          this.tagSegments.splice(index, 0, this.uiSegmentSrv.newCondition('AND'));\n        }\n        this.tagSegments.push(this.uiSegmentSrv.newOperator('='));\n        this.tagSegments.push(this.uiSegmentSrv.newFake('select tag value', 'value', 'query-segment-value'));\n        segment.type = 'key';\n        segment.cssClass = 'query-segment-key';\n      }\n\n      if (index + 1 === this.tagSegments.length) {\n        this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n      }\n    }\n\n    this.rebuildTargetTagConditions();\n  }\n\n  rebuildTargetTagConditions() {\n    const tags = [];\n    let tagIndex = 0;\n    let tagOperator = '';\n\n    _.each(this.tagSegments, (segment2, index) => {\n      if (segment2.type === 'key') {\n        if (tags.length === 0) {\n          tags.push({});\n        }\n        tags[tagIndex].key = segment2.value;\n      } else if (segment2.type === 'value') {\n        tagOperator = this.getTagValueOperator(segment2.value, tags[tagIndex].operator);\n        if (tagOperator) {\n          this.tagSegments[index - 1] = this.uiSegmentSrv.newOperator(tagOperator);\n          tags[tagIndex].operator = tagOperator;\n        }\n        tags[tagIndex].value = segment2.value;\n      } else if (segment2.type === 'condition') {\n        tags.push({ condition: segment2.value });\n        tagIndex += 1;\n      } else if (segment2.type === 'operator') {\n        tags[tagIndex].operator = segment2.value;\n      }\n    });\n\n    this.target.tags = tags;\n    this.panelCtrl.refresh();\n  }\n\n  getTagValueOperator(tagValue, tagOperator) {\n    if (tagOperator !== '=~' && tagOperator !== '!~' && /^\\/.*\\/$/.test(tagValue)) {\n      return '=~';\n    } else if ((tagOperator === '=~' || tagOperator === '!~') && /^(?!\\/.*\\/$)/.test(tagValue)) {\n      return '=';\n    }\n    return null;\n  }\n\n  getCollapsedText() {\n    return this.queryModel.render(false);\n  }\n}\n\nSplunkDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';"]}