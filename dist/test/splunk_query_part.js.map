{"version":3,"sources":["../../src/splunk_query_part.js"],"names":["index","categories","Aggregations","Selectors","Aliasing","Fields","createPart","part","def","type","message","QueryPart","register","options","QueryPartDef","category","push","groupByTimeFunctions","aliasRenderer","innerExpr","params","fieldRenderer","replaceAggregationAddStrategy","selectParts","partModel","i","length","splice","addAliasStrategy","partCount","addFieldStrategy","query","parts","_","map","clone","selectModels","addStrategy","dynamicLookup","defaultParams","renderer","functionRenderer","name","quote","renderMode","create","getCategories","replaceAggregationAdd"],"mappings":"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","file":"splunk_query_part.js","sourcesContent":["import { _ } from 'lodash';\nimport { QueryPartDef, QueryPart, functionRenderer, suffixRenderer } from './query_part';\n\nconst index = [];\nconst categories = {\n  Aggregations: [],\n  Selectors: [],\n  // Transformations: [],\n  // Predictors: [],\n  // Math: [],\n  Aliasing: [],\n  Fields: [],\n};\n\nfunction createPart(part) {\n  const def = index[part.type];\n  if (!def) {\n    throw { message: 'Could not find query part ' + part.type };\n  }\n\n  return new QueryPart(part, def);\n}\n\nfunction register(options) {\n  index[options.type] = new QueryPartDef(options);\n  options.category.push(index[options.type]);\n}\n\nconst groupByTimeFunctions = [];\n\nfunction aliasRenderer(part, innerExpr) {\n  return innerExpr + ' AS ' + part.params[0];\n}\n\nfunction fieldRenderer(part, innerExpr) {\n  if (part.params[0] === '*') {\n    return '*';\n  }\n  return '\"' + part.params[0] + '\"';\n}\n\nfunction replaceAggregationAddStrategy(selectParts, partModel) {\n  // look for existing aggregation\n  for (let i = 0; i < selectParts.length; i++) {\n    const part = selectParts[i];\n    if (part.def.category === categories.Aggregations) {\n      if (part.def.type === partModel.def.type) {\n        return;\n      }\n      // // count distinct is allowed\n      // if (part.def.type === 'count' && partModel.def.type === 'distinct') {\n      //   break;\n      // }\n      // // remove next aggregation if distinct was replaced\n      // if (part.def.type === 'distinct') {\n      //   const morePartsAvailable = selectParts.length >= i + 2;\n      //   if (partModel.def.type !== 'count' && morePartsAvailable) {\n      //     const nextPart = selectParts[i + 1];\n      //     if (nextPart.def.category === categories.Aggregations) {\n      //       selectParts.splice(i + 1, 1);\n      //     }\n      //   } else if (partModel.def.type === 'count') {\n      //     if (!morePartsAvailable || selectParts[i + 1].def.type !== 'count') {\n      //       selectParts.splice(i + 1, 0, partModel);\n      //     }\n      //     return;\n      //   }\n      // }\n      selectParts[i] = partModel;\n      return;\n    }\n    if (part.def.category === categories.Selectors) {\n      selectParts[i] = partModel;\n      return;\n    }\n  }\n\n  selectParts.splice(1, 0, partModel);\n}\n\n// function addTransformationStrategy(selectParts, partModel) {\n//   let i;\n//   // look for index to add transformation\n//   for (i = 0; i < selectParts.length; i++) {\n//     const part = selectParts[i];\n//     if (part.def.category === categories.Math || part.def.category === categories.Aliasing) {\n//       break;\n//     }\n//   }\n\n//   selectParts.splice(i, 0, partModel);\n// }\n\n// function addMathStrategy(selectParts, partModel) {\n//   const partCount = selectParts.length;\n//   if (partCount > 0) {\n//     // if last is math, replace it\n//     if (selectParts[partCount - 1].def.type === 'math') {\n//       selectParts[partCount - 1] = partModel;\n//       return;\n//     }\n//     // if next to last is math, replace it\n//     if (partCount > 1 && selectParts[partCount - 2].def.type === 'math') {\n//       selectParts[partCount - 2] = partModel;\n//       return;\n//     } else if (selectParts[partCount - 1].def.type === 'alias') {\n//       // if last is alias add it before\n//       selectParts.splice(partCount - 1, 0, partModel);\n//       return;\n//     }\n//   }\n//   selectParts.push(partModel);\n// }\n\nfunction addAliasStrategy(selectParts, partModel) {\n  const partCount = selectParts.length;\n  if (partCount > 0) {\n    // if last is alias, replace it\n    if (selectParts[partCount - 1].def.type === 'alias') {\n      selectParts[partCount - 1] = partModel;\n      return;\n    }\n  }\n  selectParts.push(partModel);\n}\n\nfunction addFieldStrategy(selectParts, partModel, query) {\n  // copy all parts\n  const parts = _.map(selectParts, (part) => {\n    return createPart({ type: part.def.type, params: _.clone(part.params) });\n  });\n\n  query.selectModels.push(parts);\n}\n\nregister({\n  type: 'field',\n  addStrategy: addFieldStrategy,\n  category: categories.Fields,\n  params: [{ type: 'field', dynamicLookup: true }],\n  defaultParams: ['_value'],\n  renderer: fieldRenderer,\n});\n\n// Aggregations\nregister({\n  type: 'count',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\n// register({\n//   type: 'distinct',\n//   addStrategy: replaceAggregationAddStrategy,\n//   category: categories.Aggregations,\n//   params: [],\n//   defaultParams: [],\n//   renderer: functionRenderer,\n// });\n\n// register({\n//   type: 'integral',\n//   addStrategy: replaceAggregationAddStrategy,\n//   category: categories.Aggregations,\n//   params: [],\n//   defaultParams: [],\n//   renderer: functionRenderer,\n// });\n\nregister({\n  type: 'avg',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'median',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\n// register({\n//   type: 'mode',\n//   addStrategy: replaceAggregationAddStrategy,\n//   category: categories.Aggregations,\n//   params: [],\n//   defaultParams: [],\n//   renderer: functionRenderer,\n// });\n\nregister({\n  type: 'sum',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'sumsq',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'var',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'range',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\n// transformations\n\n// register({\n//   type: 'derivative',\n//   addStrategy: addTransformationStrategy,\n//   category: categories.Transformations,\n//   params: [\n//     {\n//       name: 'duration',\n//       type: 'interval',\n//       options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n//     },\n//   ],\n//   defaultParams: ['10s'],\n//   renderer: functionRenderer,\n// });\n\n// register({\n//   type: 'spread',\n//   addStrategy: addTransformationStrategy,\n//   category: categories.Transformations,\n//   params: [],\n//   defaultParams: [],\n//   renderer: functionRenderer,\n// });\n\n// register({\n//   type: 'non_negative_derivative',\n//   addStrategy: addTransformationStrategy,\n//   category: categories.Transformations,\n//   params: [\n//     {\n//       name: 'duration',\n//       type: 'interval',\n//       options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n//     },\n//   ],\n//   defaultParams: ['10s'],\n//   renderer: functionRenderer,\n// });\n\n// register({\n//   type: 'difference',\n//   addStrategy: addTransformationStrategy,\n//   category: categories.Transformations,\n//   params: [],\n//   defaultParams: [],\n//   renderer: functionRenderer,\n// });\n\n// register({\n//   type: 'non_negative_difference',\n//   addStrategy: addTransformationStrategy,\n//   category: categories.Transformations,\n//   params: [],\n//   defaultParams: [],\n//   renderer: functionRenderer,\n// });\n\n// register({\n//   type: 'moving_average',\n//   addStrategy: addTransformationStrategy,\n//   category: categories.Transformations,\n//   params: [{ name: 'window', type: 'int', options: [5, 10, 20, 30, 40] }],\n//   defaultParams: [10],\n//   renderer: functionRenderer,\n// });\n\n// register({\n//   type: 'cumulative_sum',\n//   addStrategy: addTransformationStrategy,\n//   category: categories.Transformations,\n//   params: [],\n//   defaultParams: [],\n//   renderer: functionRenderer,\n// });\n\nregister({\n  type: 'stddev',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'time',\n  category: groupByTimeFunctions,\n  params: [\n    {\n      name: 'interval',\n      type: 'time',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['$__interval'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'fill',\n  category: groupByTimeFunctions,\n  params: [\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'null', '0', 'previous', 'linear'],\n    },\n  ],\n  defaultParams: ['null'],\n  renderer: functionRenderer,\n});\n\n// register({\n//   type: 'elapsed',\n//   addStrategy: addTransformationStrategy,\n//   category: categories.Transformations,\n//   params: [\n//     {\n//       name: 'duration',\n//       type: 'interval',\n//       options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n//     },\n//   ],\n//   defaultParams: ['10s'],\n//   renderer: functionRenderer,\n// });\n\n// // predictions\n// register({\n//   type: 'holt_winters',\n//   addStrategy: addTransformationStrategy,\n//   category: categories.Predictors,\n//   params: [\n//     { name: 'number', type: 'int', options: [5, 10, 20, 30, 40] },\n//     { name: 'season', type: 'int', options: [0, 1, 2, 5, 10] },\n//   ],\n//   defaultParams: [10, 2],\n//   renderer: functionRenderer,\n// });\n\n// register({\n//   type: 'holt_winters_with_fit',\n//   addStrategy: addTransformationStrategy,\n//   category: categories.Predictors,\n//   params: [\n//     { name: 'number', type: 'int', options: [5, 10, 20, 30, 40] },\n//     { name: 'season', type: 'int', options: [0, 1, 2, 5, 10] },\n//   ],\n//   defaultParams: [10, 2],\n//   renderer: functionRenderer,\n// });\n\n// Selectors\n// register({\n//   type: 'bottom',\n//   addStrategy: replaceAggregationAddStrategy,\n//   category: categories.Selectors,\n//   params: [{ name: 'count', type: 'int' }],\n//   defaultParams: [3],\n//   renderer: functionRenderer,\n// });\n\nregister({\n  type: 'earliest',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'latest',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'rate',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'latest',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'max',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'min',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'percentile',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'nth', type: 'int' }],\n  defaultParams: [95],\n  renderer: functionRenderer,\n});\n\n// register({\n//   type: 'top',\n//   addStrategy: replaceAggregationAddStrategy,\n//   category: categories.Selectors,\n//   params: [{ name: 'count', type: 'int' }],\n//   defaultParams: [3],\n//   renderer: functionRenderer,\n// });\n\n// register({\n//   type: 'tag',\n//   category: groupByTimeFunctions,\n//   params: [{ name: 'tag', type: 'string', dynamicLookup: true }],\n//   defaultParams: ['tag'],\n//   renderer: fieldRenderer,\n// });\n\n// register({\n//   type: 'math',\n//   addStrategy: addMathStrategy,\n//   category: categories.Math,\n//   params: [{ name: 'expr', type: 'string' }],\n//   defaultParams: [' / 100'],\n//   renderer: suffixRenderer,\n// });\n\nregister({\n  type: 'alias',\n  addStrategy: addAliasStrategy,\n  category: categories.Aliasing,\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n  renderMode: 'suffix',\n  renderer: aliasRenderer,\n});\n\nexport default {\n  create: createPart,\n  getCategories: () => {\n    return categories;\n  },\n  replaceAggregationAdd: replaceAggregationAddStrategy,\n};"]}