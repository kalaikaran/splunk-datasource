{"version":3,"sources":["../src/datasource.js"],"names":["dateMath","SplunkDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","c","basicAuth","length","responseParser","ResponseParser","options","timeFilter","getTimeFilter","scopedVars","targets","_","cloneDeep","queryTargets","queryModel","i","y","allQueries","map","target","hide","push","interval","__interval","SplunkQuery","render","reduce","acc","current","when","data","adhocFilters","getAdhocFilters","renderAdhocFilters","value","replace","_seriesQuery","then","rows","seriesList","alias","splunkSeries","SplunkSeries","results","resultFormat","getTable","timeSeries","getTimeSeries","query","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","doRequest","method","result","groupBy","group","params","param","variableExists","tags","interpolated","curry","parse","queryBuilder","SplunkQueryBuilder","measurement","database","buildExploreQuery","metricFindQuery","key","query_data","search","earliest_time","getSplunkTime","from","timezone","latest_time","_splunkRequest","memo","undefined","encodeURIComponent","join","response","status","console","log","message","title","output_mode","username","u","p","password","has","extend","omit","serializeParams","pick","req","precision","inspect","paramSerializer","Authorization","datasourceRequest","err","error","config","statusText","until","to","fromIsAbsolute","date","roundUp","isString","parts","exec","amount","parseInt","unit","valueOf"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nimport * as dateMath from './datemath';\nimport SplunkSeries from './splunk_series';\nimport SplunkQuery from './splunk_query';\nimport ResponseParser from './response_parser';\nimport { SplunkQueryBuilder } from './query_builder';\n\nexport class SplunkDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {\n      'Content-Type': 'application/json'\n    };\n    if (typeof c === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n    this.responseParser = new ResponseParser();\n  }\n\n  // query(options) {\n  //   var query = this.buildQueryParameters(options);\n  //   query.targets = query.targets.filter(t => !t.hide && typeof t.target !== \"undefined\");\n\n  //   let instance_url = this.url;\n  //   let instance_headers = this.headers;\n  //   let instance_creds = this.withCredentials;\n  //   let backendSrv = this.backendSrv;\n  //   let createColumns = this.createColumns;\n  //   let createRows = this.createRows;\n  //   let createExportColumns = this.createExportColumns;\n  //   let createExportRows = this.createExportRows;\n  //   let q = this.q;\n  //   let emptyResponse = q.when({\n  //     data: []\n  //   });\n\n  //   if (query.targets.length <= 0) {\n  //     return emptyResponse;\n  //   }\n  //   //return sampleResponse;\n\n  //   let targetQuery = encodeURI(query.targets[0]['target']);\n  //   if (targetQuery === 'undefined' || targetQuery.length === 0) {\n  //     return emptyResponse;\n  //   }\n\n  //   var get_result_options = {\n  //     url: instance_url + '/services/search/jobs/export?output_mode=json_rows',\n  //     method: 'POST',\n  //     data: 'search=' + targetQuery,\n  //     headers: instance_headers,\n  //     withCredentials: instance_creds\n  //   };\n  //   let columns = [];\n  //   let rows = [];\n  //   let tableResponse = [];\n\n  //   //WORKING\n  //   return backendSrv.datasourceRequest(get_result_options).then(function (data) {\n  //     createExportColumns(data, columns);\n  //     createExportRows(data, rows, columns);\n  //     let rowColsTypeCombined = {\n  //       \"columns\": columns,\n  //       \"rows\": rows,\n  //       \"type\": \"table\"\n  //     }\n  //     tableResponse.push(rowColsTypeCombined);\n  //     console.log(tableResponse);\n  //     return q.when({\n  //       data: tableResponse\n  //     });\n  //   });\n\n  // }\n\n  query(options) {\n    let timeFilter = this.getTimeFilter(options);\n    const scopedVars = options.scopedVars;\n    const targets = _.cloneDeep(options.targets);\n    const queryTargets = [];\n    let queryModel;\n    let i, y;\n\n    let allQueries = _.map(targets, target => {\n      if (target.hide) {\n        return '';\n      }\n\n      queryTargets.push(target);\n\n      // backward compatibility\n      scopedVars.interval = scopedVars.__interval;\n\n      queryModel = new SplunkQuery(target, this.templateSrv, scopedVars);\n      return queryModel.render(true);\n    }).reduce((acc, current) => {\n      if (current !== '') {\n        acc += ';' + current;\n      }\n      return acc;\n    });\n\n    if (allQueries === '') {\n      return this.$q.when({ data: [] });\n    }\n\n    // add global adhoc filters to timeFilter\n    const adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    if (adhocFilters.length > 0) {\n      timeFilter += ' AND ' + queryModel.renderAdhocFilters(adhocFilters);\n    }\n\n    // replace grafana variables\n    scopedVars.timeFilter = { value: timeFilter };\n\n    // replace templated variables\n    allQueries = this.templateSrv.replace(allQueries, scopedVars);\n\n    return this._seriesQuery(allQueries, options).then(\n      (data) => {\n        if (!data || !data.rows) {\n          return [];\n        }\n\n        const seriesList = [];\n        // for (i = 0; i < data.rows.length; i++) {\n          // const result = data.results[i];\n          // if (!result || !result.series) {\n          //   continue;\n          // }\n\n          const target = queryTargets[0];\n          let alias = target.alias;\n          if (alias) {\n            alias = this.templateSrv.replace(target.alias, options.scopedVars);\n          }\n\n          const splunkSeries = new SplunkSeries({\n            results: data,\n            alias: alias,\n          });\n\n          switch (target.resultFormat) {\n            case 'table': {\n              seriesList.push(splunkSeries.getTable());\n              break;\n            }\n            default: {\n              const timeSeries = splunkSeries.getTimeSeries();\n              for (y = 0; y < timeSeries.length; y++) {\n                seriesList.push(timeSeries[y]);\n              }\n              break;\n            }\n          }\n        // }\n\n        return { data: seriesList };\n      }\n    );\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  targetContainsTemplate(target) {\n    for (const group of target.groupBy) {\n      for (const param of group.params) {\n        if (this.templateSrv.variableExists(param)) {\n          return true;\n        }\n      }\n    }\n\n    for (const i in target.tags) {\n      if (this.templateSrv.variableExists(target.tags[i].value)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  metricFindQuery(query, options) {\n    const interpolated = this.templateSrv.replace(query, null, 'regex');\n\n    return this._seriesQuery(interpolated, options).then(_.curry(this.responseParser.parse)(query));\n  }\n\n  getTagKeys(options) {\n    const queryBuilder = new SplunkQueryBuilder({ measurement: '', tags: [] }, this.database);\n    const query = queryBuilder.buildExploreQuery('TAG_KEYS');\n    return this.metricFindQuery(query, options);\n  }\n\n  getTagValues(options) {\n    const queryBuilder = new SplunkQueryBuilder({ measurement: '', tags: [] }, this.database);\n    const query = queryBuilder.buildExploreQuery('TAG_VALUES', options.key);\n    return this.metricFindQuery(query, options);\n  }\n\n\n  _seriesQuery(query, options) {\n    if (!query) {\n      return this.$q.when({ results: [] });\n    }\n\n    let query_data = { search: query }\n\n    if (options && options.range) {\n      query_data.earliest_time = this.getSplunkTime(options.range.from, false, options.timezone);\n      query_data.latest_time = this.getSplunkTime(options.range.from, false, options.timezone);\n    }\n\n    return this._splunkRequest(\"POST\", '/services/search/jobs/export', query_data, options);\n  }\n\n  serializeParams(params) {\n    if (!params) {\n      return '';\n    }\n\n    return _.reduce(\n      params,\n      (memo, value, key) => {\n        if (value === null || value === undefined) {\n          return memo;\n        }\n        memo.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n        return memo;\n      },\n      []\n    ).join('&');\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/servicesNS/admin',\n      method: 'GET',\n      headers: this.headers\n    }).then(response => {\n      if (response.status === 200) {\n        console.log(response);\n        return {\n          status: \"success\",\n          message: \"Data source is working\",\n          title: \"Success\"\n        };\n      } else {\n        return { status: 'error', message: `Connection failed (${response.status})`, title: 'Error' };\n      }\n    });\n  }\n\n  _splunkRequest(method, url, data, options) {\n\n    const params = { output_mode: \"json_rows\" };\n\n    if (this.username) {\n      params.u = this.username;\n      params.p = this.password;\n    }\n\n    if (method === 'POST' && _.has(data, 'search')) {\n      // verb is POST and 'q' param is defined\n      _.extend(params, _.omit(data, ['search']));\n      data = this.serializeParams(_.pick(data, ['search']));\n    } else if (method === 'GET' || method === 'POST') {\n      // verb is GET, or POST without 'q' param\n      _.extend(params, data);\n      data = null;\n    }\n\n    const req = {\n      method: method,\n      url: this.url + url,\n      params: params,\n      data: data,\n      precision: 'ms',\n      inspect: { type: 'splunk' },\n      paramSerializer: this.serializeParams,\n    };\n\n    req.headers = req.headers || {};\n    if (this.basicAuth || this.withCredentials) {\n      req.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      req.headers.Authorization = this.basicAuth;\n    }\n\n    if (method === 'POST') {\n      req.headers['Content-type'] = 'application/json';\n    }\n\n    return this.backendSrv.datasourceRequest(req).then(\n      result => {\n        return result.data;\n      },\n      err => {\n        if (err.status !== 0 || err.status >= 300) {\n          if (err.data && err.data.error) {\n            throw {\n              message: 'Splunk Error: ' + err.data.error,\n              data: err.data,\n              config: err.config,\n            };\n          } else {\n            throw {\n              message: 'Network Error: ' + err.statusText + '(' + err.status + ')',\n              data: err.data,\n              config: err.config,\n            };\n          }\n        }\n      }\n    );\n  }\n\n  getTimeFilter(options) {\n    const from = this.getSplunkTime(options.rangeRaw.from, false, options.timezone);\n    const until = this.getSplunkTime(options.rangeRaw.to, true, options.timezone);\n    const fromIsAbsolute = from[from.length - 1] === 'ms';\n\n    if (until === 'now()' && !fromIsAbsolute) {\n      return 'time >= ' + from;\n    }\n\n    return 'time >= ' + from + ' and time <= ' + until;\n  }\n\n  getSplunkTime(date, roundUp, timezone) {\n    if (_.isString(date)) {\n      if (date === 'now') {\n        return 'now';\n      }\n\n      const parts = /^now-(\\d+)([dhms])$/.exec(date);\n      if (parts) {\n        const amount = parseInt(parts[1], 10);\n        const unit = parts[2];\n        return '-' + amount + unit;\n      }\n      date = dateMath.parse(date, roundUp, timezone);\n    }\n\n    return date.valueOf()/1000;\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n    // console.log(this.headers);\n    return this.backendSrv.datasourceRequest(options);\n  }\n}"]}